- name: Create a sandbox instance
  hosts: localhost
  gather_facts: False
  vars:
    instance_type: t3.micro
    security_group_id: sg-03dc99c7c771a43f0
    image: ami-0b55b2bdf150da270
    region: us-east-1
  tasks:
    - name: Launch instance
      amazon.aws.ec2_instance:
        count: 1
        security_group : "{{ security_group_id }}"
        instance_type: "{{ instance_type }}"
        image:
          id: "{{ image }}"
        wait: true
        region: "{{ region }}"
        vpc_subnet_id: subnet-0d493668
        state: running
        network:
          assign_public_ip: yes
        tags:
          Name: Check-Instance
      register: ec2

    - name: Get EC2.INSTANCES information
      debug:
        msg: "{{ ec2.instances }}"

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groupname: launched
      loop: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for_connection:
        delay: 20
        timeout: 40
      loop: "{{ ec2.instances }}"

#    - name: Set Instance_Id variable to pass to next plan.
#      set_fact:
#        Instance_Id: "{{ ec2.instance_id }}"

- name: Check for registered variable.
  hosts: launched
  become: true
  gather_facts: true
  tasks:
    - name: Validating Registered value
      ansible.builtin.debug:
        msg: "{{ ec2.instance_id }}"
#
#
#
#- name: New play to execute role to test
#  hosts: launched
#  become: True
#  gather_facts: True
#  roles:
#    - "{{ role_name }}"
#  ignore_errors: True

#- name: Terminate instances
#  hosts: localhost
#  tasks:
#    - name: Terminate instances that were previously launched
#      ec2:
#        state: 'absent'
#        instance_ids: '{{ ec2.instance_id }}'
#        region: us-east-1



#- name: Create a sandbox instance
#  hosts: localhost
#  gather_facts: False
#  vars:
#    instance_type: t3.micro
#    security_group_id: sg-03dc99c7c771a43f0
#    image: ami-0b55b2bdf150da270
#    region: us-east-1
#  tasks:
#    - name: Setup an EC2 instance
#      block:
#        - name: Create a new spot request
#          amazon.aws.ec2_spot_instance:
#            region: "{{ region }}"
#            spot_type: persistent
#            spot_price: 0.0031
#            interruption: stop
#            launch_specification:
#              security_group_ids : "{{ security_group_id }}"
#              instance_type: "{{ instance_type }}"
#              image_id: "{{ image }}"
#              subnet_id: subnet-0d493668
#            tags:
#              Name: Check-Instance
#          register: spotReq
#        - name: Wait few seconds
#          ansible.builtin.wait_for_connection:
#            delay: 15
#            timeout: 60
#        - name: Get Ec2 information
#          amazon.aws.ec2_spot_instance_info:
#            region: "{{ region }}"
#            spot_instance_request_ids:
#              - "{{spotReq.spot_request.spot_instance_request_id}}"
#          register: ec2Info
#    #      ignore_errors: yes
#        - name: Tag spot_instance
#          amazon.aws.ec2_tag:
#            resource: "{{ec2Info.spot_request[0].instance_id}}"
#            state: present
#            region: "{{ region }}"
#            tags:
#              Name: Check-Instance
#        - name: Wait 30 seconds
#          ansible.builtin.shell: sleep 30
#
#      always:
#        - name: Spot Request Termination
#          amazon.aws.ec2_spot_instance:
#            region: "{{ region }}"
#            spot_instance_request_ids: ["{{ spotReq.spot_request.spot_instance_request_id }}"]
#            state: absent
